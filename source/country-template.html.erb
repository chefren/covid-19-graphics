---
title: Country
datasets: ['dataset_top10', 'dataset_top10_by_deaths']
---

<div class="d-sm-flex align-items-center justify-content-between mb-4">
  <h1 class="h3 mb-0 text-gray-800">COVID-19 in <%= country_name %></h1>
</div>

<div class="row">

  <script>
    var country_dataset = covid19_dataset_country_<%= country_iso.downcase %>;

    var latest_numbers = {};
    for (var stat in country_dataset['total']) {
      var data = country_dataset['total'][stat];
      latest_numbers[stat] = data[data.length - 1];
    }
  </script>

  <%= partial(:top_totals) %>

</div>

<%= partial(:state_country_selector, locals: { country_iso: country_iso }) %>

<%= partial(:standard_graph_container, :locals => { :title => "Rolling 2 weeks cases of COVID-19 in #{country_name} comparison (log scale, days since over 100 cases in 2 weeks)", :graph_id => "graph_confirmed_rolling" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Cumulative cases of COVID-19 in #{country_name} comparison (log scale, days since over 100 cases)", :graph_id => "graph_confirmed_realigned_log" }) %>

<%= partial(:standard_graph_container, :locals => { :title => "Total cases of COVID-19 in #{country_name}", :graph_id => "graph_overview" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Diagnoses in states and territories over time", :graph_id => "graph_states" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "New cases per day", :graph_id => "graph_new_cases" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Tests per day in states and territories that report it", :graph_id => "graph_tests" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Daily deaths from COVID-19 across #{country_name}", :graph_id => "graph_deaths" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Rolling 2 weeks deaths from COVID-19 in #{country_name} comparison (log scale, days since over 10 deaths in 2 weeks)", :graph_id => "graph_deaths_rolling" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Deaths from COVID-19 in #{country_name} comparison (log scale, days since over 10 deaths)", :graph_id => "graph_deaths_realigned_log" }) %>

<%= partial(:standard_graph_container, :locals => { :title => "Hospital admissions for COVID-19 per day in states and territories that report it", :graph_id => "graph_hospital_admissions" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Cases currently hospitalised in states and territories that report it", :graph_id => "graph_hospital_current" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Cases currently in ICU in states and territories that report it", :graph_id => "graph_icu_current" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Cases currently on ventilators in states and territories that report it", :graph_id => "graph_ventilators_current" }) %>

<%= partial(:standard_graph_container, :locals => { :title => "Sources of infection", :graph_id => "graph_sources" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Locally acquired cases (new cases per day)", :graph_id => "graph_community" }) %>

<script>
<% if has_state_pages %>
  var has_states = (country_dataset['subseries'] && Object.keys(country_dataset['subseries']).length > 0);
<% else %>
  var has_states = false;
<% end %>
  var lines = [];

  for (var stat in country_dataset['total']) {
    if (stat != 'confirmed' && stat != 'recovered' && stat != 'deaths') continue;
    lines.push(country_series_scaled(country_dataset, country_dataset, '<%= country_iso %>', scale_none, '')[stat]);
  }

  Plotly.newPlot('graph_overview', lines, default_layout, default_config);

  if (!has_states) {
    // no data, so remove the whole row
    $('#graph_states_row').remove();
  } else {
    var subseries_lines = [];

    for (var subregion in country_dataset['subseries']) {
      var dataset = country_dataset['subseries'][subregion]['total'];
      subseries_lines.push({
        x: country_dataset['timeseries_dates'],
        y: dataset['confirmed'],
        name: subregion,
      });
    }

    Plotly.newPlot('graph_states', limit_to_biggest_series_group_rest(subseries_lines, 9), default_layout, default_config);
  }

  var new_cases = [];
  if (!has_states) {
    new_cases.push({
      x: country_dataset['timeseries_dates'],
      y: cumulative_to_delta(country_dataset['total']['confirmed']),
      type: 'bar',
    });
  } else {
    for (var subregion in country_dataset['subseries']) {
      new_cases.push({
        x: country_dataset['timeseries_dates'],
        y: cumulative_to_delta(country_dataset['subseries'][subregion]['total']['confirmed']),
        type: 'bar',
        name: subregion,
      });
    }
  }

  Plotly.newPlot('graph_new_cases', limit_to_biggest_series_group_rest(new_cases, 9), $.extend({}, default_layout, {barmode: 'stack'}), $.extend({}, default_config));

  // we want the confirmed and deaths for the country, plus the top 10 countries
  var country_series = country_series_scaled(country_dataset, country_dataset, '<%= country_iso %>', scale_none, '');
  plotly_log_graph_vs_top('graph_confirmed_realigned_log', '<%= country_iso %>', country_series['confirmed'], covid19_dataset_top10, 'confirmed');
  plotly_log_graph_vs_top('graph_deaths_realigned_log', '<%= country_iso %>', country_series['deaths'], covid19_dataset_top10_by_deaths, 'deaths');

  // same confirmed cases graph, but rolling
  plotly_log_graph_vs_top('graph_confirmed_rolling', '<%= country_iso %>', country_series['confirmed'], covid19_dataset_top10, 'confirmed', {showDoublingLines: false, mapFn: trace_to_rolling_avg, ymin: 0});
  plotly_log_graph_vs_top('graph_deaths_rolling', '<%= country_iso %>', country_series['deaths'], covid19_dataset_top10, 'deaths', {showDoublingLines: false, mapFn: trace_to_rolling_avg, ymin: 0});

  // tests per day per state

  var tested_data = [];
  if (has_states) {
    for (var subregion in country_dataset['subseries']) {
      if (!country_dataset['subseries'][subregion]['total']['tested']) continue;
      tested_data.push({
        x: country_dataset['timeseries_dates'],
        y: cumulative_to_delta(country_dataset['subseries'][subregion]['total']['tested']),
        type: 'bar',
        name: subregion,
      });
    }
  } else if (country_dataset['total']['tested']) {
    tested_data.push({
      x: country_dataset['timeseries_dates'],
      y: cumulative_to_delta(country_dataset['total']['tested']),
      type: 'bar',
      name: '<%= country_name %>',
    });
    $('#graph_tests_row .graph-title').text('Tests per day');
  }
  
  if (tested_data.length == 0) {
    $('#graph_tests_row').remove();
  } else {
    tested_data = limit_to_biggest_series_group_rest(tested_data, 9);

    var summed_tested = null;
    for (var i in tested_data) {
      var ts = tested_data[i];
      summed_tested = combine_trace_data(summed_tested, ts);
    }

    var confirmed_ts = cumulative_to_delta(country_dataset['total']['confirmed']);
    var tested_ts = summed_tested.y;

    tested_data.push({
      x: country_dataset['timeseries_dates'],
      y: confirmed_ts,
      type: 'line',
      name: 'Confirmed cases (country)',
    });

    tested_data.push({
      x: country_dataset['timeseries_dates'],
      y: trace_percent_rolling(confirmed_ts, tested_ts, 7),
      type: 'line',
      name: '% tests positive (country, 1w rolling avg)',
      yaxis: 'y2',
      line: {
        color: '#f33',
        width: 2
      }
    });

    Plotly.newPlot('graph_tests', tested_data, $.extend({}, default_layout, {
      barmode: 'stack',
      yaxis: {
        rangemode: 'tozero'
      },
      "yaxis2": {
        range: [0, 100],
        overlaying: 'y',
        side: 'right'
      }
    }), $.extend({}, default_config));
  }

  // deaths

  var new_deaths = [];
  if (!has_states) {
    new_deaths.push({
      x: country_dataset['timeseries_dates'],
      y: cumulative_to_delta(country_dataset['total']['deaths']),
      type: 'bar',
    });
  } else {
    for (var subregion in country_dataset['subseries']) {
      new_deaths.push({
        x: country_dataset['timeseries_dates'],
        y: cumulative_to_delta(country_dataset['subseries'][subregion]['total']['deaths']),
        type: 'bar',
        name: subregion,
      });
    }
  }

  Plotly.newPlot('graph_deaths', limit_to_biggest_series_group_rest(new_deaths, 9), $.extend({}, default_layout, {barmode: 'stack'}), $.extend({}, default_config));

  // hospitalisation, icu and ventilator stats where supported
  function optional_trace_over_time(graph_id, series_key, data_is_cumulative) {
    var traces = [];

    if (has_states) {
      for (var subregion in country_dataset['subseries']) {
        if (!country_dataset['subseries'][subregion]['total'][series_key]) continue;

        var data = {
          x: country_dataset['timeseries_dates'],
          y: country_dataset['subseries'][subregion]['total'][series_key],
          type: 'line',
          name: subregion,
        };
        if (data_is_cumulative) {
          data.y = cumulative_to_delta(data.y);
          data.type = 'bar';
        }
        traces.push(data);
      }
    } else if (country_dataset['total'][series_key]) {
      var data = {
        x: country_dataset['timeseries_dates'],
        y: country_dataset['total'][series_key],
        type: 'line',
        name: '<%= country_name %>',
      };
      if (data_is_cumulative) {
        data.y = cumulative_to_delta(data.y);
        data.type = 'bar';
      }
      traces.push(data);
      $('#'+graph_id+'_row .graph-title').text($('#'+graph_id+'_row .graph-title').text().replace(' in states and territories that report it', ''));
    }

    if (traces.length > 0) {
      if (data_is_cumulative) {
        traces = limit_to_biggest_series_group_rest(traces, 9);
      }
      Plotly.newPlot(graph_id, traces, $.extend({}, default_layout, {barmode: 'stack', showlegend: true}), $.extend({}, default_config));
    } else {
      // no data, so remove the whole row
      $('#'+graph_id+'_row').remove();
    }
  }
  optional_trace_over_time('graph_hospital_admissions', 'hospitalized', true);
  optional_trace_over_time('graph_hospital_current', 'current_hospitalized', false);
  optional_trace_over_time('graph_icu_current', 'current_icu', false);
  optional_trace_over_time('graph_ventilators_current', 'current_ventilators', false);

  // optional_stacked_bar_over_time is in site.js
  optional_stacked_bar_over_time(country_dataset, 'graph_sources', 'sources', false);
  optional_stacked_bar_over_time(country_dataset, 'graph_community', 'sources', true, function(key) {
    return (key.indexOf('Locally acquired') == 0);
  }, {});
  optional_stacked_bar_over_time(country_dataset, 'graph_age_groups', 'age_groups', false);

</script>
